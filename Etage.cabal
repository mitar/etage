Name:                Etage
Version:             0.1
Synopsis:            A general data-flow framework
Description:         A general data-flow framework featuring nondeterminism and neurological pseudo-terminology. It can be used for
                     example for data-flow computations or event propagation networks. It tries hard to aide type checking and to
                     allow proper initialization and cleanup so that interfaces to input and output devices (data or events producers or
                     consumers) can be made (so that created models\/systems\/networks can be used directly in real world applications, for
                     example robots).
                     .
                     Its main goal is to model complex neural networks with more biological realism. Namely that impulses do
                     take time to travel and neuron responses are also not instantaneous. And of course that neural systems are in
                     its base nondeterministic and that some level of determinism is build upon that. All this of course makes reasoning
                     about such networks even harder (impossible?).
                     .
                     This framework is in fact just a simple abstraction of Haskell threads and data passing between them through
                     channels with threads' initialization and cleanup wrapped into a Haskell type class.
                     .
                     Feel free to contribute or suggest additional features or (example) programs.
License:             LGPL-3
License-file:        LICENSE
Author:              Mitar Milutinovic
Maintainer:          mitar.haskell@tnode.com
Copyright:           (c) 2010 Mitar Milutinovic
Category:            Control
Build-type:          Simple
Cabal-version:       >= 1.2
Stability:           experimental
Homepage:            http://mitar.tnode.com

Library
  Exposed-modules:     Control.Etage,
                       Control.Etage.Dump,
                       Control.Etage.Random
  Build-depends:       base >= 4 && < 5,
                       random > 1.0 && < 2,
                       unix >= 2.4 && < 3,
                       time >= 1.1 && < 2
  Other-modules:       Control.Etage.Types,
                       Control.Etage.Propagate
  HS-source-dirs:      lib
  GHC-options:         -Wall
